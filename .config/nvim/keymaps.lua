DefPrefix{
open = { '<leader>o', desc = '[o]pen' },
  open_new = { '<leader>on', desc = '[n]ew' },
  open_vim = { '<leader>ov', desc = '[v]im config' },
  code = { '<leader>d', desc = 'LSP' },
  note = { '<leader>n', desc = '[n]otes' },
  speed_dial = { '<leader>s', desc = '[s]peed dial' },
  vim = { '<leader>v', desc = '[v]im' },
  vim_tabs = { '<leader>v;', desc = 'tabs' },
  quickfix = { '<leader>q', desc = '[q]uickfix' },
  terminal = { '<leader>t', desc = '[t]erminal' },
  terminal_execute = { '<leader>te', desc = 'terminal [e]xecute' },
  context = { '<leader>c', desc = '[c]ontext' },
  edit = { '<leader>e', desc = '[e]dit' },
  yank = { '<leader>y', desc = '[y]ank' },
  ai = { '<leader>a', desc = 'AI' },
  -- git = { '<leader>g', desc = '[g]it' },
}

DefKeymap{
  vim_kill_buffers = { 'k', prefix = 'vim', mode = { 'n' }, desc = '[k]ill buffers' },
  vim_delete_buffer = { 'd', prefix = 'vim', mode = { 'n' }, desc = '[d]elete buffer' },
  vim_only_buffer = { 'o', prefix = 'vim', mode = { 'n' }, desc = '[o]nly buffer' },
  vim_wrap = { 'w', prefix = 'vim', mode = { 'n' }, desc = '[w]rap lines' },
  vim_number_line = { 'n', prefix = 'vim', mode = { 'n' }, desc = '[n]umber line' },
  vim_relative_number_line = { 'r', prefix = 'vim', mode = { 'n' }, desc = '[r]elative number line' },
  vim_spell_check = { 'S', prefix = 'vim', mode = { 'n' }, desc = '[S]pell check' },
  vim_signcolumn = { 's', prefix = 'vim', mode = { 'n' }, desc = '[s]igncolumn' },
  vim_previous_buffer = { 'p', prefix = 'vim', mode = { 'n' }, desc = '[p]revious buffer' },
  vim_quick_delete = { '<m-x>', mode = { 'n' }, desc = 'quick delete line' },
  cant_close_vim = { 'q', prefix = 'vim', mode = { 'n' }, desc = '[q]uit vim' },
  vim_tab_quickadd = { ';', prefix = 'vim_tabs', mode = { 'n' }, desc = 'tab quickadd' },
  vim_tab_add = { 'a', prefix = 'vim_tabs', mode = { 'n' }, desc = 'tab [a]dd' },
  vim_tab_close = { 'c', prefix = 'vim_tabs', mode = { 'n' }, desc = 'tab [c]lose' },
  vim_tab_name = { 'r', prefix = 'vim_tabs', mode = { 'n' }, desc = 'tab re[n]ame' },
  vim_tab_move_left = { 'h', prefix = 'vim_tabs', mode = { 'n' }, desc = 'tab move left' },
  vim_tab_move_right = { 'l', prefix = 'vim_tabs', mode = { 'n' }, desc = 'tab move right' },
  vim_tab_move_first = { 'H', prefix = 'vim_tabs', mode = { 'n' }, desc = 'tab move first' },
  vim_tab_move_last = { 'L', prefix = 'vim_tabs', mode = { 'n' }, desc = 'tab move last' },
  vim_tab_only = { 'o', prefix = 'vim_tabs', mode = { 'n' }, desc = 'tab [o]nly' },
  select_last_insert = { '<leader>i', mode = { 'n' }, desc = 'select last [i]nsert' },
  select_last_paste = { '<leader>p', mode = { 'n' }, desc = 'select last [p]aste' },
  select_between_space = { '<m-i>', mode = { 'n', 'x', 'o' }, desc = 'select [i]nside spaces' },
  select_all = { '<m-w>', mode = { 'n', 'x', 'o' }, desc = 'select [w]hole buffer' },
  cancel = { '<c-c>', mode = { 'n', 'x', 'o', 'i' }, desc = 'cancel' },
  soft_cancel = { '<m-c>', mode = { 'n', 'x', 'o', 'i' }, desc = 'soft cancel' },
  write_file = { '<c-s>', mode = { 'n', 'x', 'o', 'i' }, desc = '[W]rite' },
  jump = { 's', mode = { 'n', 'x', 'o' }, desc = 'jump' },
  jump_treesitter = { 'S', mode = { 'n', 'x', 'o' }, desc = 'treesitter jump' },
  open_file_browser = { 'o', prefix = 'open', mode = { 'n' }, desc = 'explore current directory' },
  open_project_browser = { 'p', prefix = 'open', mode = { 'n' }, desc = 'explore current [p]roject' },
  open_persistent_file_browser = { 'O', prefix = 'open', mode = { 'n' }, desc = 'persistent explorer' },
  open_home = { 'h', prefix = 'open', mode = { 'n' }, desc = 'explore [h]ome' },
  open_dev = { 'd', prefix = 'open', mode = { 'n' }, desc = 'explore [d]ev' },
  open_root = { '/', prefix = 'open', mode = { 'n' }, desc = 'explore root' },
  open_temp = { 't', prefix = 'open', mode = { 'n' }, desc = 'explore [t]mp' },
  open_config = { 'A', prefix = 'open', mode = { 'n' }, desc = 'explore all configs' },
  search_config = { 'a', prefix = 'open', mode = { 'n' }, desc = 'search [a]ll configs' },
  open_config_vim_autocmds = { 'a', prefix = 'open_vim', mode = { 'n' }, desc = 'open nvim/[a]utocmds.lua' },
  open_config_vim_context = { 'C', prefix = 'open_vim', mode = { 'n' }, desc = 'explore ~/.[c]ontext/nvim' },
  search_vim_context = { 'c', prefix = 'open_vim', mode = { 'n' }, desc = 'search ~/.[c]ontext/nvim' },
  search_context = { 'c', prefix = 'open', mode = { 'n' }, desc = 'open [c]ontext' },
  open_context = { 'C', prefix = 'open', mode = { 'n' }, desc = 'explore [c]ontext' },
  open_config_vim_init = { 'i', prefix = 'open_vim', mode = { 'n' }, desc = 'open nvim/[i]nit.lua' },
  open_config_vim_keymaps = { 'k', prefix = 'open_vim', mode = { 'n' }, desc = 'open nvim/[k]eymaps.lua' },
  open_config_vim_modules = { 'M', prefix = 'open_vim', mode = { 'n' }, desc = 'explore nvim/[m]odules' },
  search_vim_modules = { 'm', prefix = 'open_vim', mode = { 'n' }, desc = 'search nvim/[m]odules' },
  search_vim_grep = { '/', prefix = 'open_vim', mode = { 'n' }, desc = 'grep nvim' },
  open_config_vim_api = { '`', prefix = 'open_vim', mode = { 'n' }, desc = 'open nvim/api.lua' },
  search_files = { '<leader>f', mode = { 'n' }, desc = 'search [f]iles' },
  search_symbols = { 's', prefix = 'code', mode = { 'n' }, desc = 'search [s]ymbols' },
  search_references = { 'r', prefix = 'code', mode = { 'n' }, desc = 'search [r]eferences' },
  search_diagnostics = { 'z', prefix = 'code', mode = { 'n' }, desc = 'search diagnostics' },
  search_workspace_diagnostics = { 'Z', prefix = 'code', mode = { 'n' }, desc = 'search project diagnostics' },
  search_code_actions = { 'a', prefix = 'code', mode = { 'n' }, desc = 'search code [a]ctions' },
  search_live_grep = { '<leader>/', mode = { 'n' }, desc = 'grep project' },
  search_grep = { '<leader><space>', mode = { 'n' }, desc = 'grep file' },
  search_help = { '<leader>?', mode = { 'n' }, desc = 'search help' },
  search_man = { '<leader>M', mode = { 'n' }, desc = 'search man pages' },
  search_buffers = { '<leader>k', mode = { 'n' }, desc = 'search buffers' },
  search_command_history = { '<leader>h', mode = { 'n' }, desc = 'search command [h]istory' },
  search_color_schemes = { 'c', prefix = 'vim', mode = { 'n' }, desc = 'search [c]olor schemes' },
  search_oldfiles = { '<leader>j', mode = { 'n' }, desc = 'search oldfiles' },
  toggle_auto_comments = { 'a', prefix = 'vim', mode = { 'n' }, desc = '[A]uto-comment' },
  smart_comma = { '<c-k>', mode = { 'i' }, desc = 'context-aware comma insertion' },
  goto_definition = { 'd', prefix = 'code', mode = { 'n' }, desc = 'goto [d]efinition' },
  goto_type_definition = { 't', prefix = 'code', mode = { 'n' }, desc = 'goto [t]ype definition' },
  goto_implementation = { 'i', prefix = 'code', mode = { 'n' }, desc = 'goto [i]mplementation' },
  rename = { '<leader>r', mode = { 'n' }, desc = 'rename symbol' },
  show_diagnostics = { '<leader>z', mode = { 'n' }, desc = 'diagnostics under cursor' },
  -- code_actions = { '<leader>a', mode = { 'n' }, desc = 'show code [a]ctions' },
  -- code_actions_range = { '<leader>a', mode = { 'v' }, desc = 'show code [a]ctions' },
  speed_dial_add = { 'a', prefix = 'speed_dial', mode = { 'n' }, desc = '[A]dd to speed dial' },
  speed_dial_select = { 's', prefix = 'speed_dial', mode = { 'n' }, desc = '[S]elect from speed dial' },
  speed_dial_1 = { '<leader>1', mode = { 'n' }, desc = 'speed dial [1]' },
  speed_dial_2 = { '<leader>2', mode = { 'n' }, desc = 'speed dial [2]' },
  speed_dial_3 = { '<leader>3', mode = { 'n' }, desc = 'speed dial [3]' },
  speed_dial_4 = { '<leader>4', mode = { 'n' }, desc = 'speed dial [4]' },
  speed_dial_5 = { '<leader>5', mode = { 'n' }, desc = 'speed dial [5]' },
  speed_dial_prev = { 'p', prefix = 'speed_dial', mode = { 'n' }, desc = '[P]revious speed dial' },
  speed_dial_next = { 'n', prefix = 'speed_dial', mode = { 'n' }, desc = '[N]ext speed dial' },
  speed_dial_clear = { 'c', prefix = 'speed_dial', mode = { 'n' }, desc = '[C]lear speed dial' },
  split = { 'gj', mode = { 'n', 'v' }, desc = 'Split' },
  join = { 'gk', mode = { 'n', 'v' }, desc = 'Join' },
  msdos_remover = { 'm', prefix = 'edit', mode = { 'n' }, desc = '[M]S-DOS remover' },
  nuke = { 'n', prefix = 'edit', mode = { 'n' }, desc = '[n]uke file' },
  note_fuzzy = { 'n', prefix = 'note', mode = { 'n' }, desc = 'notes fuzzy' },
  note_agenda = { 'a', prefix = 'note', mode = { 'n' }, desc = 'notes [a]genda' },
  note_todo = { 't', prefix = 'note', mode = { 'n' }, desc = 'notes [t]odo' },
  note_capture = { 'c', prefix = 'note', mode = { 'n' }, desc = 'notes [c]apture' },
  note_search = { 'n', prefix = 'note', mode = { 'n' }, desc = 'notes search' },
  note_explore = { 'N', prefix = 'note', mode = { 'n' }, desc = 'notes explore' },
  note_inbox = { 'i', prefix = 'note', mode = { 'n' }, desc = 'notes [i]nbox' },
  note_normal_insert = { '<m-n>', mode = { 'n' }, desc = 'notes insert' },
  note_insert = { '<m-n>', mode = { 'i' }, desc = 'notes insert' },
  note_todo_change = { ';', prefix = 'note', mode = { 'n' }, desc = 'notes todo change' },
  note_refile = { 'r', prefix = 'note', mode = { 'n' }, desc = 'notes [r]efile' },
  note_schedule = { 's', prefix = 'note', mode = { 'n' }, desc = 'notes [s]chedule' },
  note_promote = { 'p', prefix = 'note', mode = { 'n' }, desc = 'notes [p]romote' },
  note_demote = { 'd', prefix = 'note', mode = { 'n' }, desc = 'notes [d]emote' },
  note_headings = { 'h', prefix = 'note', mode = { 'n' }, desc = 'notes [h]eadings' },
  scratchpad = { '<leader>;', mode = { 'n' }, desc = 'toggle scratchpad' },
  scratchpad_current_buffer = { '<leader>:', mode = { 'n' }, desc = 'open scratchpad' },
  toggle_diagnostics = { '<leader>Z', mode = { 'n' }, desc = 'toggle diagnostics' },
  reload_file = { '<leader>R', mode = { 'n' }, desc = '[R]eload file' },
  black_hole_delete = { '<leader>x', mode = { 'x' }, desc = 'black hole delete' },
  black_hole_paste = { '<leader>p', mode = { 'x' }, desc = 'black hole [p]aste' },
  toggle_eol_comma = { '<m-,>', mode = { 'n', 'i' }, desc = 'toggle EOL comma' },
  toggle_eol_semicolon = { '<m-;>', mode = { 'n', 'i' }, desc = 'toggle EOL semicolon' },
  empty_file = { 'n', prefix = 'open_new', mode = { 'n' }, desc = 'text file' },
  empty_json_file = { 'j', prefix = 'open_new', mode = { 'n' }, desc = '[j]son file' },
  empty_lua_file = { 'l', prefix = 'open_new', mode = { 'n' }, desc = '[l]ua file' },
  empty_vim_file = { 'v', prefix = 'open_new', mode = { 'n' }, desc = '[v]im file' },
  empty_ts_file = { 't', prefix = 'open_new', mode = { 'n' }, desc = '[t]ypescript file' },
  empty_python_file = { 'p', prefix = 'open_new', mode = { 'n' }, desc = '[p]ython file' },
  empty_go_file = { 'g', prefix = 'open_new', mode = { 'n' }, desc = '[g]o file' },
  empty_sh_file = { 's', prefix = 'open_new', mode = { 'n' }, desc = '[s]h file' },
  empty_bash_file = { 'b', prefix = 'open_new', mode = { 'n' }, desc = '[b]ash file' },
  empty_fish_file = { 'f', prefix = 'open_new', mode = { 'n' }, desc = '[f]sh file' },
  empty_nushell_file = { 'u', prefix = 'open_new', mode = { 'n' }, desc = '[n]ushell file' },
  empty_markdown_file = { 'm', prefix = 'open_new', mode = { 'n' }, desc = '[m]arkdown file' },
  empty_sql_file = { 'S', prefix = 'open_new', mode = { 'n' }, desc = '[S]QL file' },
  empty_graphql_file = { 'G', prefix = 'open_new', mode = { 'n' }, desc = '[G]raphQL file' },
  qf_toggle = { 'q', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix toggle' },
  qf_next = { 'n', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix [n]ext' },
  qf_previous = { 'p', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix [p]revious' },
  qf_first = { '0', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix first' },
  qf_last = { '$', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix last' },
  qf_add = { 'a', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix [a]dd' },
  qf_open = { 'o', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix [o]pen' },
  qf_close = { 'x', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix e[x]it' },
  qf_clear = { 'c', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix [c]lear' },
  qf_go = { 'g', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix [g]o' },
  qf_diagnostics = { 'z', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix diagnostics' },
  qf_all_diagnostics = { 'Z', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix all diagnostics' },
  qf_delete = { 'd', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix [d]elete' },
  qf_reverse = { 'r', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix [r]everse' },
  qf_focus = { 'f', prefix = 'quickfix', mode = { 'n' }, desc = 'quickfix [f]ocus' },
  terminal_add = { 'a', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [a]dd' },
  terminal_quickadd = { ';', prefix = 'terminal', mode = { 'n' }, desc = 'terminal quickadd' },
  terminal_nu_add = { 'n', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [n]u add' },
  terminal_nu_quickadd = { 'N', prefix = 'terminal', mode = { 'n' }, desc = 'terminal nu quickadd' },
  terminal_bash_add = { 'b', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [b]ash add' },
  terminal_bash_quickadd = { 'B', prefix = 'terminal', mode = { 'n' }, desc = 'terminal bash quickadd' },
  terminal_rename = { 'r', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [r]ename' },
  terminal_kill = { 'k', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [k]ill' },
  terminal_switch = { 't', prefix = 'terminal', mode = { 'n' }, desc = 'terminal switch' },
  -- terminal_list = { 'l', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [l]ist' },
  terminal_1 = { '1', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [1]' },
  terminal_2 = { '2', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [2]' },
  terminal_3 = { '3', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [3]' },
  terminal_4 = { '4', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [4]' },
  terminal_5 = { '5', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [5]' },
  terminal_execute_1 = { '1', prefix = 'terminal_execute', mode = { 'n' }, desc = 'terminal [1] execute' },
  terminal_execute_2 = { '2', prefix = 'terminal_execute', mode = { 'n' }, desc = 'terminal [2] execute' },
  terminal_execute_3 = { '3', prefix = 'terminal_execute', mode = { 'n' }, desc = 'terminal [3] execute' },
  terminal_execute_4 = { '4', prefix = 'terminal_execute', mode = { 'n' }, desc = 'terminal [4] execute' },
  terminal_execute_5 = { '5', prefix = 'terminal_execute', mode = { 'n' }, desc = 'terminal [5] execute' },
  terminal_execute_last = { 'e', prefix = 'terminal_execute', mode = { 'n' }, desc = 'terminal [e]xecute' },
  terminal_cancel = { 'c', prefix = 'terminal', mode = { 'n' }, desc = 'terminal [c]ancel' },
  open_idea = { 'i', prefix = 'open', mode = { 'n' }, desc = 'open in [i]dea' },
  -- open_rider = { 'r', prefix = 'open', mode = { 'n' }, desc = 'open in [r]ider' },
  undotree = { '<leader>u', mode = { 'n' }, desc = '[u]ndo tree' },
  vim_eval = { 'e', prefix = 'vim', mode = { 'n' }, desc = '[e]val source' },
  vim_source = { 'v', prefix = 'vim', mode = { 'n' }, desc = 'source init.lua' },
  goto_mark = { '<leader>m', mode = { 'n' }, desc = 'goto [m]ark' },
  fix_whitespace = { 'w', prefix = 'edit', mode = { 'n' }, desc = 'fix [w]hitespace' },
  remove_empty_lines = { 'e', prefix = 'edit', mode = { 'n' }, desc = 'remove [e]mpty lines' },
  single_empty_line = { 'E', prefix = 'edit', mode = { 'n' }, desc = 'single empty line' },
  indent_line = { 'i', prefix = 'edit', mode = { 'n', 'x' }, desc = '[i]ndent' },
  indent_all = { 'I', prefix = 'edit', mode = { 'n' }, desc = '[I]ndent all' },
  insert_blank_above = { 'k', prefix = 'edit', mode = { 'n' }, desc = 'insert blank line above' },
  insert_blank_below = { 'j', prefix = 'edit', mode = { 'n' }, desc = 'insert blank line below' },
  delete_above = { 'K', prefix = 'edit', mode = { 'n' }, desc = 'delete above' },
  delete_below = { 'J', prefix = 'edit', mode = { 'n' }, desc = 'delete below' },
  yank_filename = { 'f', prefix = 'yank', mode = { 'n' }, desc = '[f]ilename' },
  revert_buffer = { 'R', prefix = 'edit', mode = { 'n' }, desc = '[R]evert_buffer' },
  delete_forward = { '<c-l>', mode = { 'i' }, desc = 'delete forward' },
  ai_chat = { 'a', prefix = 'ai', mode = { 'n' }, desc = 'Toggle chat' },
  ai_inline = { 'i', prefix = 'ai', mode = { 'n' }, desc = '[i]nline prompt' },
  workspaces_select = { '<leader>w', mode = { 'n' }, desc = '[w]orkspaces' },
  vim_messages = { 'm', prefix = 'vim', mode = { 'n' }, desc = '[m]essages' },
  replace = { 'r', prefix = 'edit', mode = { 'n' }, desc = '[r]eplace' },
  window_left = { '<m-h>', mode = { 'n' }, desc = 'window left' },
  window_down = { '<m-j>', mode = { 'n' }, desc = 'window down' },
  window_up = { '<m-k>', mode = { 'n' }, desc = 'window up' },
  window_right = { '<m-l>', mode = { 'n' }, desc = 'window right' },
  redirect = { '<c-q>', mode = { 'n' }, desc = 'redirect messages' },
  toggle_completions = { '<f1>', mode = { 'n', 'x', 'o', 'c', 'i' }, desc = 'toggle completions' },
  toggle_lsp = { '<f2>', mode = { 'n', 'x', 'o', 'c', 'i' }, desc = 'toggle lsp' },
  toggle_outline = { 'o', prefix = 'code', mode = { 'n' }, desc = 'toggle [o]utline' },
  exit_tmux = { 't', prefix = 'vim', mode = { 'n' }, desc = 'leave [t]mux' },
  kill_tmux = { 'T', prefix = 'vim', mode = { 'n' }, desc = 'kill [t]mux' },
  smart_center = { 'zZ', mode = { 'n' }, desc = 'smart center' },
}

